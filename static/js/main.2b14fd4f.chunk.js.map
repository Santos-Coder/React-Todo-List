{"version":3,"sources":["components/Todoitems/Todoitems.js","components/Additem/Additem.js","App.js","serviceWorker.js","index.js"],"names":["Todoitems","props","items","deletItem","listItems","length","map","item","key","id","className","name","age","onClick","Additem","state","ChangeHandler","e","setState","target","value","submitHandler","preventDefault","addItem","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RA6BeA,G,MA1BG,SAACC,GAAW,IACnBC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,UAERC,EADOF,EAAMG,OAEfH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,IAAKD,EAAKE,IACX,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,WAAUG,QAAW,kBAAMV,EAAUI,EAAKE,MAA1D,YAIV,wDACN,OACI,yBAAKC,UAAU,aACX,6BACI,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,aAAhB,WAEHN,K,OCcEU,G,iNAlCXC,MAAQ,CACJJ,KAAM,GACNC,IAAK,I,EAETI,cAAe,SAACC,GACZ,EAAKC,SAAL,eACCD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAG5BC,cAAgB,SAACJ,GAEd,GADCA,EAAEK,iBACyB,KAAxBL,EAAEE,OAAOR,KAAKS,MACd,OAAO,EAEV,EAAKnB,MAAMsB,QAAQ,EAAKR,OACxB,EAAKG,SAAU,CACXP,KAAM,GACNC,IAAK,M,wEAKT,OACI,6BACI,0BAAMY,SAAYC,KAAKJ,eACnB,2BAAOX,UAAU,OAAOgB,KAAK,OAAOC,YAAY,kBAAkBlB,GAAG,OAAOmB,SAAUH,KAAKT,cAAeI,MAAOK,KAAKV,MAAMJ,OAC5H,2BAAOD,UAAU,MAAMgB,KAAK,SAASC,YAAY,iBAAiBlB,GAAG,MAAMmB,SAAUH,KAAKT,cAAeI,MAAOK,KAAKV,MAAMH,MAC3H,2BAAOF,UAAU,MAAMgB,KAAK,SAASN,MAAM,c,GA5BzCS,cCkCPC,E,2MA/Bbf,MAAQ,CACNb,MAAO,CACL,CAACO,GAAG,EAAGE,KAAK,UAAWC,IAAK,IAC5B,CAACH,GAAG,EAAGE,KAAK,QAASC,IAAK,IAC1B,CAACH,GAAG,EAAGE,KAAK,OAAQC,IAAK,M,EAG7BT,UAAY,SAACM,GAIX,IAAIP,EAAQ,EAAKa,MAAMb,MAAM6B,QAAO,SAAAxB,GAAS,OAAOA,EAAKE,KAAOA,KAChE,EAAKS,SAAU,CAAChB,W,EAElBqB,QAAU,SAAChB,GACTA,EAAKE,GAAKuB,KAAKC,SACf,IAAI/B,EAAQ,EAAKa,MAAMb,MACvBA,EAAMgC,KAAK3B,GACX,EAAKW,SAAS,CAAChB,W,wEAGf,OACE,yBAAKQ,UAAU,iBACb,6CACA,kBAAC,EAAD,CAAWR,MAASuB,KAAKV,MAAMb,MAAOC,UAAasB,KAAKtB,YACxD,kBAAC,EAAD,CAASoB,QAAWE,KAAKF,e,GA1BfM,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b14fd4f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todoitems.css';\r\n\r\nconst Todoitems = (props) => {\r\n    const {items, deletItem} = props;\r\n    let length = items.length;\r\n    const listItems = length ? (\r\n        items.map(item => {\r\n            return (\r\n                <div key={item.id}>\r\n                    <span className=\"name\">{item.name}</span>\r\n                    <span className=\"age\">{item.age}</span>\r\n                    <span className=\"sub icon\"onClick = {() => deletItem(item.id)}>&times;</span>\r\n                </div>\r\n            )\r\n        })\r\n    ) : ( <p>There is no items to show</p>)\r\n    return (\r\n        <div className=\"listitems\">\r\n            <div>\r\n                <span className=\"name title\">Name</span>\r\n                <span className=\"age title\">Age</span>\r\n                <span className=\"sub title\">Action</span>\r\n            </div>\r\n            {listItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todoitems; ","import React, { Component } from 'react';\r\nimport './Additem.css';\r\n\r\nclass Additem extends Component {\r\n    state = {\r\n        name: '',\r\n        age: ''\r\n    }\r\n    ChangeHandler= (e) => {\r\n        this.setState ({\r\n        [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n       if (e.target.name.value === '') {\r\n           return false;\r\n       } else {\r\n        this.props.addItem(this.state);\r\n        this.setState ({\r\n            name: '',\r\n            age: ''\r\n        })\r\n       }\r\n    }\r\n    render () {\r\n        return (\r\n            <div>\r\n                <form onSubmit = {this.submitHandler}>\r\n                    <input className=\"name\" type=\"text\" placeholder=\"Enter your name\" id=\"name\" onChange={this.ChangeHandler} value={this.state.name} ></input>\r\n                    <input className=\"age\" type=\"number\" placeholder=\"Enter your age\" id=\"age\" onChange={this.ChangeHandler} value={this.state.age} ></input>\r\n                    <input className=\"sub\" type=\"submit\" value=\"ADD\"></input>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Additem;","import React, { Component } from 'react';\nimport Todoitems from './components/Todoitems/Todoitems';\nimport Additem from './components/Additem/Additem';\n\n\nclass App extends Component {\n  state = {\n    items: [\n      {id:1, name:'Mahmoud', age: 34},\n      {id:2, name:'Ahmed', age: 36},\n      {id:3, name:'Omar', age: 22}\n    ]\n  } \n  deletItem = (id) => {\n    // let items = this.state.items;\n    // let i = items.findIndex(item => item.id === id);\n    // items.splice(i,1);\n    let items = this.state.items.filter(item => {return item.id !== id})\n    this.setState ({items})\n  }\n  addItem = (item) => {\n    item.id = Math.random();\n    let items = this.state.items;\n    items.push(item);\n    this.setState({items})\n  }\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1>Todo List App</h1>\n        <Todoitems items = {this.state.items} deletItem = {this.deletItem}/>\n        <Additem addItem = {this.addItem}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}